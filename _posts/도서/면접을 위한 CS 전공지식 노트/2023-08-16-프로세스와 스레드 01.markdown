---
layout: post
title: 프로세스와 스레드 01
date: 2023-08-16 19:20:23 +0900
category: CS
---
# 면접을 위한 CS 전공지식 노트  
> 프로세스와 스레드    

프로세스: 컴퓨터에서 실행되고 있는 프로그램으로 CPU 스케줄링의 대상이 되는 작업이다.  
스레드: 프로세스 내 작업의 흐름이다.  
프로그램이 메모리에 올라가면 프로세스가 되는 인스턴스화가 일어나고  
이후 운영체제의 CPU 스케줄러에 따라 CPU가 프로세스를 실행한다.  
  
> 프로세스와 컴파일 과정

프로세스:프로그램으로부터 인스턴스화된 것이다.  
ex)구글 크롬 프로그램을 두번 클릭하면 구글 크롬 프로세스가 시작된다.  

프로그램: 컴파일러가 컴파일 과정을 거쳐 컴퓨터가 이해할 수 있는 기계어로 번역되어 실행될 수 있는 파일이 되는 것이다. 여기서 말하는 프로그램은 c언어 기반의 프로그램을 의미한다.  
별도의 컴파일 과정 없이 한번에 한줄씩 읽어들이는 인터프리터 언어(파이썬 같은)로 된 프로그램과는 다르다.  
  
프로그램의 컴파일 과정  
                            어셈블리어  
                               ^    v  
소스 코드 파일 > 전처리> 컴파일러 > 어셈블러 > 목적코드 > 링커 > 실행가능한 파일  
                                                           ^  
                                                        라이브러리    
  
전처리: 소스코드의 주석을 제거하고 #include 등의 헤더 파일을 병합해 매크로를 치환하는 것이다.  
컴파일러: 오류처리, 코드최적화 작업을 하며 어셈블리어로 변환하는 것이다.  
어셈블러: 어셈블리어는 목적 코드로 변환된다. 이뗴 확장자는 운영체제마다 다른데 리눅스에서는 .0이다.  
ex)김철수.c라는 파일을 만들었을 때 김철수.o라는 파일이 만들어지게 된다.  
링커: 프로그램 내에 있는 라이브러리 함수 또는 다른 파일들과 목적 코드를 결합해 실행파일을 만든다.  
실행파일의 확장자는 .exe, .out 확장자를 가진다.  

정적라이브러리는 정적과 동적으로 나뉜다.  
정적 라이브러리: 프로그램 빌드 시 라이브러리가 제공하는 모든 코드를 실행 파일에 넣는 방식이다.  
시스템 환경 등 외부 의존도가 낮고 코드 중복 등 메모리 효율성이 떨어지는 단점이 있다.    
동적 라이브러리: 프로그램 실행 시 필요한 때만 DLL이라는 함수 정보를 통해 참조하는 방식이다.  
메모리 효율성에서 장점이 있고 외부 의존도가 높아진다.  
  
>프로세스의 상태  
           생성   실행 - 종료  
            |   /  |  
대기중단 - 대기 - 중단 - 일시중단  
  |_________________________|  
  
생성(create) 상태: 프로세스가 생성된 상태로 fork() 또는 exec() 함수로 생성한다.  
이때 PCB가 생성된다.  
  
*fork(): 부모 프로세스의 주소 공간을 그대로 복사하며, 새로운 자식 프로세스를 생성하는 함수이다.  
주소 공간만 복사할 뿐 부모 프로세스의 비동기 작업 등을 상속하지 않는다.  
*exec(): 새롭게 프로세스를 생성하는 함수이다.  
  
대기(ready) 상태: 메모리 공간이 충분하면 메모리를 할당받고 아니면 아닌 상태로 대기하고 있으며  
CPU 스케줄러로부터 CPU 소유권이 넘어오기를 기다리는 상태이다.  
  
대기 중단(ready suspended) 상태: 메모리 부족으로 일시 중단된 상태이다.  
  
실행(running) 상태: CPU 소유권과 메모리를 할당받고 인스트럭션을 수행중인 상태를 의미한다.   
이를 두고 CPU burst가 일어났다고 한다.       
*프로세스 instruction: 실행 중인 프로세스가 수행하는 작업 또는 명령어에 대한 정보로  
어셈블리 언어에서 instruction은 기계어 명령어에 대응하며, 프로그램의 동작을 지시한다.  
  
중단(blocked) 상태: 어떤 이벤트가 발생한 이우 기다리며 프로세스가 차단된 상태이다.  
I/O 디바이스에 의한 인터럽트로 이런 현상이 발생하기도 한다.  
  
일시 중단(blocked suspended) 상태: 대기 중단과 유사한 상태로 중단된 상태에서  
프로세스가 실행되려 했지만 메모리 부족으로 일시중단된 상태이다.  
  
종료(terminated) 상태: 메모리와 CPU 소유권을 모두 놓고가는 상태이다.  
종료는 자연스럽게 되는것도 있지만 부모 프로세스가 자식 프로세스를 강제시키는 비자발적 종료(abort)도  
존재한다. 자식 프로세스에 할당된 자원의 한계치를 넘어서거나 부모 프로세스가 종료되거나 사용자가  
process.kill 등 여러 명령어로 프로세스를 종료할 때 발생한다.  
  
참고 출처:  
https://resilient-923.tistory.com/397  

