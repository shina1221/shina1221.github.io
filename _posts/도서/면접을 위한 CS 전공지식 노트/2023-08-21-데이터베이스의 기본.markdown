---
layout: post
title: 데이터베이스의 기본  
date: 2023-08-21 19:20:23 +0900
category: CS
---
# 면접을 위한 CS 전공지식 노트  
> 데이터베이스의 기본  

DB: 일정한 규칙, 혹은 규약을 통해 구조화되어 저장되는 데이터의 모음집이다.  
DBMS: 해당 데이터베이스를 제어 관리하는 통합 시스템이다. 쿼리언어를 통해 삽입, 삭제, 수정, 조회등이 가능하며  
실시간 접근과 동시 공유가 가능하다.  
  
응용 프로그램  
DBMS  
데이터베이스 순서로 데이터를 주고 받는다.   
  
>엔티티  

엔티티: 사람, 장소, 물건 등 여러개의 속성을 지닌 명사를 의미한다.  
ex)회원은 이름, 아이디, 주소, 전화번호의 속성을 가진다.  
  
A가 혼자서는 존재하지 못하고 B의 존재 여부에 따라 종속적일 때 A는 약한 엔티티이고 B는 강한 엔티티가 된다.  
ex)방-약한 엔티티, 건물-강한 엔티티  
  
>릴레이션  

릴레이션: 데이터베이스에서 정보를 구분해 저장하는 기본단위이다.  
엔티티에 관한 데이터를 데이터베이스는 릴레이션 하나에 담아서 관리한다.  
ex)회원이라는 릴레이션에 이름, 아이디, 주소, 전화번호, 성별이라는 속성이 있다.  
회원이라는 엔티티는 데이터베이스에서 릴레이션으로 변화해  
릴레이션은 관계형 데이터베이스에서 테이블로 불리고, NoSQL 데이터베이스에서는 컬렉션이라고 한다.  
  
ex) MySQL의 구조) 레코드-테이블-데이터베이스  
    레코드가 쌓여 테이블이 되고 테이블이 쌓여서 데이터베이스가 된다.  
    NoSQL의 구조) 도큐먼트-컬렉션-데이터베이스  
  
> 속성  

속성: 릴레이션에서 관리하는 구체적이고 구체적이며 고유한 이름을 갖는 정보이다.  
ex) 엔티티:차 속성:바퀴 수, 차종...  
  
> 도메인  

도메인: 릴레이션에 포함된 각각의 속성들이 가질 수 있는 값의 집합이다.  
ex)차 회사(현대, 도요타, BMW...)  
  
> 필드와 레코드  

레코드: 튜플이라고도 부르는 테이블에 쌓이는 행 단위의 데이터이다.  
ex)코드 auto incerment: insert할 때마다 자동으로 값이 증가되게 저장할 수 있는 기능이다.  
  
필드 타입으로는 숫자타입, 날짜타입(DATE, DATETIME, TIMESTAMP), 문자타입(CHAR, VARCHAR)이 있다.  
CHAR: 테이블 생성 시 선언한 길이로 고정되며 길이는 0에서 255 사이의 값을 가진다.  
레코드 저장시 무조건 선언한 길이 앖으로 고정해서 저장된다.  
VARCHAR: 가변 길이 문자열로 0에서 65535 사이의 값으로 길이를 지정할 수 있고 입력된 데이터에 따라 용량을  
가변시켜 저장한다.  
ex) 10글자 저장 시 해당하는 바이트+ 길이기록용 1바이트로 저장한다.  
지정된 형태에 따라 저장된 CHAR의 경우 검색에 유리하다.  
검색을 별로 하지 않고 유동적인 길이를 가진 데이터는 VARCHAR로 저장하는 것이 좋다.  
   
TEXT: 큰 문자열 저장시 사용하며 게시판의 본문 저장시 사용한다.  
BLOB: 이미지, 동영상 등 큰 데이터 저장시 사용한다.  
  
ENUM: ENUM(x-small, small, medium, large, x-large) 형태로 쓰이며  
이 중에서 하나만 선택하는 단일 선택만 가능하고  
ENUM 리스트에 없는 잘못된 값을 삽입하면 빈 문자열이 대신 삽입됩니다.  
ENUM을 이용하면 x-small 등이 0, 1 등으로 매핑되어 메모리를 적게 사용한다.  
ENUM은 최대 65535(2의 16제곱)개의 요소들을 넣을 수 있다.   
  
SET: ENUM과 비슷하지만 여러 개의 데이터를 선택할 수 있고, 비트 단위의 연산을 할 수 있고  
최대 64개의 요소를 집어넣을 수 있다.  
  
참고로 ENUM이나 SET을 쓸 경우 공간적으로 이점을 볼 수 있지만 애플리케이션의 수정에 따라  
데이터베이스의 ENUM이나 SET에서 정의한 목록을 수정해야 한다.  
  
> 관계  

1:1 관계
ex) 유저당 메일 계정이 하나일 경우가 있다.  
    
1:N 관계: 한 개체가 다른 많은 개체를 포함하는 관계이다.   
ex) 쇼핑몰 운영 시 한 유저가 장바구니에 여러 상품을 넣어두는 경우가 있다.  
  
N:M 관계: 
ex)한 학생은 여러 강의를 듣고, 한 강의에는 여러 학생들이 들을 수 있는 경우가 있다.  
이때 테이블 두 개를 직접적으로 연결해 구축하지 않고 1:N, 1:M이라는 관계를 갖는 테이블 두 개로 나눠  
설정한다.  

> 키  

키: 테이블 간의 관계를 더 명확하게 하고 테이블 자체의 인덱스를 위해 설정된 장치이다.  
최소성(필드를 조합하지 않고 최소 필드만써서 키를 형성할 수 있는 것)을 만족하는 후보키(기본키, 대체키)와  
유일성을 만족하는 슈퍼키가 있다. 후보키에서 선택되지 못한 기본키는 대쳋키가 된다.  
후보키는 슈퍼키안에 포함된다.  
  
> 기본키  

기본키: 유일성과 최소성을 만족하는 키다.  
테이블의 데이터 중 고유하게 존재하는 속성이며 기본키는 중복되선 안된다.  
기본키는 자연키와 인조키 중에서 설정한다.  
  
자연키: 중복된 값들을 제외하고 중복되지 않는 것을 남기면 나오는 키다.  
자연키는 언젠가는 변한다.  
인조키: 인위적으로 고유 식별자를 생성하며 자연키와는 다르게 변하지 않는다.  
보통 기본치는 인조키로 설정한다.   
오라클은 sequence, MySQL은 auto increment 등으로 설정한다.  
  
> 외래키  

외래키: 다른 테이블의 기본키를 그대로 참조하는 값으로 개체와의 관계를 식별하는데 사용한다.  
외래키는 중복을 허용한다.    
ex) ID   name   contact   
    a1  김철수    112   
    a2  박철수    114  
  
  ID  usr_id   name  
 ID01   a2    아우디  
 ID02   a2     벤츠  
 ID03   a2     BMW  
  
> 후보키  

후보키: 기본키가 될 수 있는 후보들이며 유일성과 최소성을 동시에 만족하는 키다.  
  
> 대체키  

대체키: 후보키가 두 개 이상일 경우 어느 하나를 기본키로 지정하고 남은 후보키들이다.  
  
> 슈퍼키  

슈퍼키: 각 레코드를 유일하게 식별할 수 있는 유일성을 갖춘키다.  

  


참고 출처:  
https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=goddlaek&logNo=221005664911  


