---
layout: post
title: 프로세스와 스레드 02
date: 2023-08-16 19:20:23 +0900
category: CS
---
# 면접을 위한 CS 전공지식 노트  
> 프로세스와 메모리 구조  

동적영역  스택  
동적영역   힙   
정적영역  데이터 영역 - BSS segment  
                      - Data segment  
정적영역  코드영역  
  
스택: 지역변수, 매개변수, 함수가 저장되고 컴파일 시에 크기가 결정되며 동적인 특징을 가진다.  
  
스택 영역은 함수가 함수를 재귀적으로 호출하면서 동적으로 크키가 늘어날 수 있는데  
이때 힙과 스택의 메모리 영역이 겹치면 안되기 때문에 힘과 스택 사이의 공간을 비워놓는다.  
  
힙: 동적 할당시 사용되며 런타임 시 크기가 결정된다.  
*런타임: 컴퓨터 프로그램이 실행되고 있는 동안의 동작이다.   
  
데이터 영역: 전역변수, 정적변수가 저장되고 정적인 특징을 갖는 프로그램이 종료되면 사라지는 변수가  
들어있는 영역이다. 데이터 영역은 BSS 영역과 Data 영역으로 나뉘고  
BSS 영역은 초기화되지 않은 변수가 0으로 초기화되어 저장되며  
Data 영역(Data Segment)은 0이 아닌 다른 값으로 할당된 변수들이 저장된다.      
  
코드영역: 프로그램 내에 저장되어 있는 소스코드가 들어가는 영역이다.  
이 영역은 수정 불가능한 기계어로 되어있고 정적인 특징을 가진다.  
  
> PCB(Process Control Block)  

PCB: 운영체제에서 프로세스에 대한 메타데이터를 저장한 데이터를 말한다.  
프로세스 제어 블록이라고도 하며 프로세스가 생성되면 운영체제는 해당 PCB를 생성한다.  
프로그램이 실행되면 프로세스가 생성되고 프로세스 주소 값들에 앞서 설명한 스택, 힙 등의  
구조를 기반으로 메모리가 할당된다. 그리고 이 프로세스의 메타데이터 들이 PCB에 저장되어 관리된다.  
이는 프로세스의 중요한 정보를 포함하고 있기 때문에 일반 사용자가 접근하지 못하도록 커널 스택의 가장  
앞부분에서 관리된다.  
  
*메타데이터: 데이터에 관한 구조화된 데이터이자 데이터를 설명하는 작은 데이터,  
대량의 정보 가운데에서 찾고 있는 정보를 효율적으로 찾아 이용하기 위해 일정한 규칙에 따라  
콘텐츠에 부여되는 데이터이다.  
  
PCB의 구조  
프로세스 스케줄링 상태: 준비, 일시중단 등 프로세스가 CPU에 대한 소유권을 얻은 이후의 상태  
프로세스 ID: 프로세스 ID. 해당 프로세스의 자식 프로세스 ID  
프로세스 권한: 컴퓨터 자원 또는 I/O 디바이스에 대한 권한 정보  
프로그램 카운터: 프로세스에서 실행해야 할 다음 명령어의 주소에 대한 포인터  
CPU 레지스터: 프로세스를 실행하기 위해 저장해야 할 레지스터에 대한 정보  
CPU 스케줄링 정보: CPU 스케줄러에 의해 중단된 시간 등에 대한 정보  
계정 정보: 프로세스 실행에 사용된 CPU 사용량, 실행한 유저의 정보  
I/O 상태 정보: 프로세스에 할당된 I/O 디바이스 목록  

컨텍스트 스위칭: PCB를 교환하는 과정이다.  
한 프로세스에 할당된 시간이 끝나거나 인터럽트에 의해 발생한다.  
컴퓨터에서 어떠한 시점에서 실행되고 있는 프로세스는 단 한개이다. 동시에 여러 프로세스가  
구동되는 것처럼 보이는 것은 다른 프로세스와의 컨텍스트 스위칭이 빠른 속도로 실행되기 때문이다.  
현대 컴퓨터는 멀티코어의 CPU를 가지기 때문에 한 시점에 한 개의 프로그램은 아니다.  
  
컨텍스트 스위칭을 설명할 때는 싱글코어를 기준으로 설명한다.  
한 개의 프로세스 A가 실행하다 멈추고, 프로세스 A의 PCB를 저장하고 다시 프로세스 B를 로드해 실행한다.  
그리고 다시 프로세스 B의 PCB를 저장하고 프로세스 A의 PCB를 로드한다.  
컨텍스트 스위칭이 일어날 때 유휴 시간과 캐시미스가 발생한다.   

*유휴시간: 일종의 휴식이 아닌, 업무를 수행하면서 정보를 숙고하거나 다음 단계를 계획하는 데 활용되는 시간이다.  
*캐시미스: 컨텍스트 스위칭이 일어날 때 프로세스가 가지고 있는 메모리 주소가 그대로 있으면 잘못된  
주소 변환이 생기므로 캐시클리어(캐시를 지우는 작업) 과정을 겪게되며 캐시미스가 발생한다.  
**캐시미스는 제어장치가 캐시에서 데이터를 찾지 못해 메모리에서 데이터를 찾아오는 것이다.  
  
스레드에서의 컨텍스트 스위칭  
스레드는 스택 영역을 제외한 모든 메모리를 공유하기 때문에 스레드 컨택스트 스위칭의 경우 비용이  
더 적고 시간도 더 적게 걸린다.  
  
참고 출처:  
https://ko.wikipedia.org/wiki/%EB%9F%B0%ED%83%80%EC%9E%84  

