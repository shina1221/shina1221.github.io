---
layout: post
title: 프로그래밍 패러다임01
date: 2023-08-02 19:20:23 +0900
category: CS
---
# 면접을 위한 CS 전공지식 노트  
> 프로그래밍 패러다임    

라이브러리: 라이브러리는 재사용 가능한 코드의 집합으로, 특정 기능을 수행하는 함수, 클래스, 메소드 등으로 구성된다.  
프레임워크: 프레임워크는 소프트웨어 개발을 위한 구조를 제공하는 플랫폼으로 라이브러리보다 큰 개념이다.  
            프레임워크는 애플리케이션의 전체 아키텍쳐를 정의하며 어떤 기능들을 어떻게 상호작용하도록 설계되었는지를  결정한다.  
<br>
프록시 서버: 서버와 클라이언트 사이에서 클라이언트가 자신을 통해 다른 네트워크에   
간접적으로 접속할 수 있게 해주는 컴퓨터 시스템이나 응용 프로그램이다.   
프록시 서버에서의 캐싱  
캐시 안에 정보를 담아두고, 캐시 안에 있는 정보를 요구하는 요청에 대해 다시 저 멀리 있는  
원격 서버에 요청하지 않고 캐시 안에 있는 데이터를 활용하는 것을 말한다.  
이를 통해 불필요하게 외부와 연결하지 않기 때문에 트래픽을 줄일 수 있다.  
<br>
버퍼: 데이터가 저장되는 메모리 공간
버퍼 오버플로우: 메모리 공간을 벗어나는 경우를 의미하는데 이때 사용되지 않아야 할 영역에  
데이터가 덮어씌워져 주소, 값을 바꾸는 공격이 발생하기도 한다.  
CDN: 각 사용자가 인터넷에 접속하는 곳과 가까운 곳에서 콘텐츠를 캐싱 또는 배포하는 서버  
네트워크를 말한다. 이를 통해 사용자가 웹 서버로부터 콘텐츠를 다운로드 하는 시간을 줄일 수 있다.  
콘텐츠를 효율적으로 전달하기 위해 여러 노드를 가진 네트워크에 데이터를 저장해 제공하는 시스템이다.  
인터넷 서비스 제공자에 직접 연결되어 데이터를 전송하므로, 콘텐츠 병목을 피할 수 있다.  
<br>
콘텐츠 전송 네트워크(CDN)는 데이터 사용량이 많은 애플리케이션의 웹 페이지 로드  
속도를 높이는 상호 연결된 서버 네트워크로 사용자가 웹 사이트를 방문할 때 해당  
웹 사이트 서버의 데이터는 사용자의 컴퓨터에 도달하기 위해 인터넷을 통해 이동해야 한다.   사용자가 해당 서버에서 멀리 떨어져 있는 경우 동영상 또는 웹 사이트 이미지와 같은  
대용량 파일을 로드하는 데 시간이 오래 걸린다. 대신 웹 사이트 콘텐츠는 지리적으로  
사용자와 가까운 CDN 서버에 저장되며 컴퓨터에 훨씬 빨리 도달한다.  
*캐시: 데이터나 값을 미리 복사해 놓는 임시 장소를 의미한다.  
캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간을 줄여 빠른 속도로 데이터에 접근할 수 있다.  
<br>
객체지향 프로그래밍(Object Oriented Programming): 객체들의 집합으로 프로그램의 상호작용을 표현해  
데이터를 객체로 취급하며 객체 내부에 선언된 메서드를 활용하는 방식이다.  
설계에 많은 시간이 소요되며 처리 속도가 다른 프로그래밍 패러다임에 비해 상대적으로 느리다.  
<br>
객체지향 프로그래밍의 특징  
-추상화:복잡한 시스템으로부터 핵심적인 개념 또는 기능을 간추려 내는 것이다.   
-캡슐화: 객체의 속성과 메서드를 하나로 묶고 일부를 외부에 감춰 은닉하는 것이다.  
-상속성: 상위 클래스의 특성을 하위 클래스가 이어 받아서 재사용하거나 추가, 확장하는 것이다.  
코드의 재사용 측면, 계층적인 관계 생성, 유지 보수성 측면에서 중요하다.  
-다형성: 하나의 메서드나 클래스가 다양한 방법으로 동작하는 것을 의미한다.  
대표적인 예시로 오버로딩, 오버라이딩이 있다.  
! 상속을 이용해 기능을 확장하거나 변경하는 것도 다형성을 나타낸다.  
*오버로딩: 같은 메서드 이름을 가지면서 매개변수의 개수나 타입이 다른 여러 개의 메서드를 정의하는 것이다.  
즉 같은 이름의 메서드를 여러 번 정의해 다양한 인자를 받아 처리하는 것이다.  
매개변수는 같고 리턴 타입만 다르면 오버로딩이 아니다.  
*오버라이딩: 부모클래스에 정의된 메서드를 동일한 이름과 시그니처로 다시 구현해 동작을 변경할 수 있다.  
부모클래스의 메서드와 메서드 구성 요소 모두가 동일해야 하며  
메서드명, 매개변수, 리턴 타입이 모두 같아야 한다.  
<br>
설계원칙 (SOLID) 
단일책임원칙: 모든 클래스는 각각 하나의 책임만 가져야 한다.  
Ex) 예를 들어 A라는 로직이 존재한다면 어떠한 클래스는 A에 관한 클래스여야 하고 이를  
수정한다고 해도 A와 관련된 수정이어야 한다.  
개방 폐쇄 원칙: 기존의 코드는 잘 변경하지 않으면서 확장은 쉬워야 한다.  
리스코프 치환 원칙: 프로그램의 객체는 프로그램의 정확성을 깨트리지 않으면서 하위 타입의  
인스턴스로 바꿀 수 있어야 한다. 부모 객체에 자식 객체를 넣어도 시스템이 문제없이 돌아가게 만드는 것이다.   
인터페이스 분리 원칙: 하나의 일반적인 인터페이스보다 <구체적인 여러 개>의 인터페이스를 만들어야 한다.    
의존 역전 원칙: 자신보다 변하기 쉬운 것에 의존하던 것을 추상화된 인터페이스나 상위 클래스를  
둬 변하기 쉬운 것의 변화에 영향 받지 않게 하는 원칙이다.     
Ex) 타이어를 갈아 끼울 수 있는 틀을 만들어 높은 후 다양한 타이어로 교체할 수 있어야 한다.  
<br>
절차형 프로그래밍: 로직이 수행되어야 할 연속적인 계산으로 이뤄져 있다. 코드를 구현하기만 하면  
되기 때문에 코드의 가독성이 좋으며 실행 속도가 빠르다. 하지만 모듈화가 어렵고 유지 보수성이 떨어진다.   
<br>
참고 출처:  
https://aws.amazon.com/ko/what-is/cdn/  
https://azure.microsoft.com/ko-kr/resources/cloud-computing-dictionary/what-is-caching/#overview  
https://gbsb.tistory.com/235  

