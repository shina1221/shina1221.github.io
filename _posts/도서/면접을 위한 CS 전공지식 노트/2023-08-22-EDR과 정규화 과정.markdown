---
layout: post
title: 데이터베이스의 기본  
date: 2023-08-22 19:20:23 +0900
category: CS
---
# 면접을 위한 CS 전공지식 노트  
> EDR과 정규화 과정    

EDR(Entity Relationship Diagram): 데이터베이스를 구축할 때 가장 기초적인 뼈대 역할을 하며,  
릴레이션(테이블) 간의 관계들을 정의한 것이다.  
  
> 정규화 과정

릴례이션 간의 잘못된 종속 관계로 인해 데이터베이스 이상 현상이 일어나서 이를 해결하거나  
저장 공간을 효율적으로 사용하기 위해 릴레이션을 여러개로 분리하는 과정이다.  

이상현상: 특정 데이터 삭제시 필요한 데이터가 같이 삭제되거나,  
데이터를 삽입해야 하는데 하나의 필드 값이 NULL이 되면 안되서 삽입하기 어려운 현상이 있다.  

정규형 원칙: 자료의 중복성은 감소해야 하고, 독립적인 관계는 별개의 릴레이션으로 표현해야 하며,  
각각의 릴레이션은 독립적인 표현이 가능해야 하는 것이다.  
  
제 1정규형: 릴레이션의 모든 도메인이 더 이상 분해될 수 없는 원자값만드로 구성되어야 한다.  
릴레이션의 속성 값 중에서 한 개의 기본키에 대해 두 개 이상의 값을 가지는 반복 집합이 있어선  
안되고 반복 집합이 있다면 제거해야 한다.  
  
제 2정규형: 릴레이션이 제 1정규형이며 부분 함수의 종속성을 제거한 형태이다.  
부분 함수의 종속제거란 기본키가 아닌 모든 속성이 기본키에 완전 함수 종속적인 것이다.  
단 릴레이션 분해시 동등한 릴레이션으로 분해해야 하고, 정보 손실이 발생하지 않는 무손실  
분해로 분해되어야 한다.  
  
제 3정규형  
제2정규형이고 기본키가 아닌 모든 속성이 이행적 함수 종속을 만족하지 않는 상태이다.  
*이행적 함수 종속: A->B와 B->C가 존재하면 논리적으로 A->C가 성립하는데  
이 때 집합 C가 집합 A에 이행적으로 함수 종속이 되었다고 본다.  
ex)회원은 실적에 따라 등급이 나뉘고, 회원의 등급에 따라 혜택이 주어지는 것이 있다.  
  
보이스/코드 정규형: 제 3정규형으로 결정자가 후보키가 아닌 함수 종속 관계를 제거해  
릴레이션의 함수 종속 관계에서 모든 결정자가 후보키인 상태다.  
*결정자: 함수 종속 관계에서 특정 종속자를 결정짓는 요소, X->Y일 때 X는 결정자, Y는 종속자이다.  

> 트랜잭션과 무결성  
  
트랜잭션은 데이터베이스에서 하나의 논리적 기능을 수행하기 위한 작업이다.  
데이터베이스에 접근하는 방법인 쿼리들을 하나로 묶는 단위이다.  
특징으로 ACID(원자성, 일관성, 독립성, 지속성)이 있다.  
  
원자성: 트랜잭션과 관련된 일이 모두 수행되거나 되지 않음을 보장하는 특징이다.  
ex)트랜잭션을 커밋했는데, 문제가 발생해 롤백하는 경우 그 이후에 모두 수행되지 않는 것이 있다.  
  
*커밋: 여러 쿼리가 성공적으로 처리되었다고 확정하는 명령어다.  
트랜잭션 단위로 수행되며 변경된 내용이 모두 데이터베이스에 영구적으로 저장되는 것이다.  
커밋이 수행되었다는 하나의 트랜잭션이 성공적으로 수행되었다고도 볼 수 있다.  
  
*롤백: 트랜잭션으로 처리한 하나의 묶음 과정을 일어나기 전으로 돌리는 일(취소)이다.  
  
커밋과 롤백 덕에 데이터의 무결성이 보장된다.  
  
트랜잭션 수행시 커넥션 단위로 수행하기 때문에 커넥션 객체를 넘겨 수행해야 한다.  
트랜잭션 전파: 여러 트랜잭션 관련 메서드의 호출을 하나의 트랜잭션에 묶이도록 하는 것이다.  
  
일관성: 허용된 방식으로만 데이터를 변경해야 한다는 것이다.  
데이터베이스에 기록된 모든 데이터는 여러가지 조건, 규칙에 따라 유효함을 가져야한다.  
  
격리성: 트랜잭션 수행 시 서로 끼어들지 못하는 것이다.  
복수의 병렬 트랜잭션은 서로 격리되어 마치 순차적으로 실행되는 것처럼 작동되어야 하고,  
데이터베이스는 여러 사용자가 같은 데이터에 접근할 수 있어야 한다.  
  
격리 수준은 serializable(팬텀리드), repeatable_read(반복 가능하지 않은 조회),  
read_committed(팬텀리드, 반복 가능하지 않은 조회),  
read_uncommitted(팬텀 리드, 반복 가능하지 않은 조회, 더티 리드)가 있다.  
serializable에서 뒤로 갈수록 동시성이 강해지지만 격리성은 약해진다.  
  
*팬텀리드: 한 트랜잭션 내에서 동일한 쿼리를 보냈을 때 해당 조회 결과가 다른 경우이다.  
ex) A가 회원 테이블에서 나이가 40 이상인 회원을 조회했을 때 그 다음 B가 age가 나이가 42인  
레코드를 삽입했다면 이후에는 다른 결과가 조회된다.  
   
*반복 가능하지 않은 조회: 한 트랜잭션 내의 같은 행에 두 번 이상 조회가 발생했는데, 그 값이 다른  
경우를 가리킨다. 팬텀리드와 다른 점은 반복 가능하지 않은 조회는 행 값이 달라질 수도 있는데,  
팬텀리드는 다른 행이 선택될 수도 있다는 것을 의미한다.  
ex) A에게 빵이 100개라는 데이터가 있다고 할 때 다른 사용자가 빵의 수를 10개로  
변경해 커밋했다고 하면 A는 빵이 10이라는 결과를 읽게 된다.   
   
*더티리드: 반복 가능하지 않은 조회와 유사하며 한 트랜잭션이 실행 중일 때 다른 트랜잭션에 의해  
수정되었지만 아직 커밋되지 않은 행의 데이터를 읽을 수 있을 때 발생한다.  
ex) A가 빵의 수가 100인 데이터를 10으로 변경한 내용이 커밋되지 않은 상태라도 이후 데이터를  
조회했을 때 빵은 10으로 나오는 경우이다.  
  
> 격리수준  

serializable: 말 그대로 트랜잭션을 순차적으로 진행시키는 것이다.  
여러 트랜잭션은 동시에 같은 행에 접근할 수 없다. 이 수준은 매우 엄격한 수준으로 해당 행에 대해  
격리시키고, 이후 트랜잭션이 이 행에 대해 일어난다면 기다려야 한다. 따라서 교착 상태가 일어날  
확률도 많고 가장 성능이 떨어지는 격리 수준이다.  
  
repeatable_read: 하나의 트랜잭션이 수정한 행을 다른 트랜잭션이 수정할 수 없도록 막아주지만  
새로운 행을 추가하는 것은 막지 않는다. 따라서 이후에 추가된 행이 발견될 수도 있다.  
  
read_committed: 가장 많이 사용되는 격리수준이다.  
read_uncommitted와 달리 다른 트랜잭션이 커밋하지 않은 정보는 읽을 수 없다.  
즉 커밋 완료된 데이터에 대해서만 조회를 허용한다.  
  
하지만 어떤 트랜잭션이 접근한 행을 다른 트랜잭션이 수정할 수 있다.  
예를 들어 트랜잭션 A가 수정한 행을 트랜잭션 B가 수정할 수도 있다.  
이 때문에 트랜잭션 A가 같은 행을 다시 읽을 때 다른 내용이 발견될 수도 있다.  
  
read_uncommitted는 가장 낮은 격리 수준으로, 하나의 트랜잭션이 커밋되기 이전에 다른 트랜잭션에  
노출되는 문제가 있지만 가장 빠르다. 이는 거대한 양의 데이터를 어림잡아 집계하는데 사용하면 좋다.  
  
지속성: 성공적으로 수행된 트랜잭션은 영원히 반영되어야 하는 것이다.
이는 데이터베이스에 시스템 장애가 발생해도 원래 상태로 복구하는 회복 기능이 있어야 함이다.  
데이터베이스는 이를 위해 체크섬, 저널링, 롤백 등의 기능을 제공한다.  
*체크섬: 중복 검사의 한 형태로, 오류 정정을 통해 송신된 자료의 무결성을 보호하는 단순한 방법이다.  
*저널링: 파일 시스템 또는 데이터베이스 시스템에 변경 사항을 반영(커밋)하기전에 로깅하는 것,  
트랜잭션 등 변경 사항에 대한 로그를 남기는 것이다.  
  
> 무결성  

데이터의 정확성, 일관성, 유효성을 유지하는 것이다.  
무결성이 유지되어야 데이터베이스에 저장된 데이터 값과 그 값에 해당하는 현실 세계의 실제 값이  
일치하는지에 대한 신뢰가 생긴다.  
-개체 무결성: 기본키로 선택된 필드는 빈 값을 허용하지 않는다.  
-참조 무결성: 서로 참조 관계에 있는 두 테이블의 데이터는 항상 일관된 값을 유지해야 한다.  
-고유 무결성: 특정 속성에 대해 고유한값을 가지도록 조건이 주어진 경우 그 속성 값은 모두 고유한  
값을 가진다.  
-NULL 무결성: 특정 속성 값에 NULL이 올 수 없다는 조건이 주어진 경우 그 속성 값은 NULL이 될 수  
없다는 제약조건이다.  
  
*데이터의 정확성: 데이터베이스 내의 데이터는 서로 모순되지 않아야 하며, 같은 데이터에 대한 여러  
복사본 간에도 일관성을 유지해야 한다.    
*데이터 품질 표준_ISO 8000에서 유효성은 하나의 구분영역으로 분리된다.  
유효성 내에 정확성과 일관성이라는 지표를 두고 있다.  
정확성: 실세계를 정확히 반영하는 것이다.  
일관성: 동일 데이터 간 불일치가 존재하지 않는 것이다.  

참고 출처:  
https://swingswing.tistory.com/186  
