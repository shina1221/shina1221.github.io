---
layout: post
title: 메모리01
date: 2023-08-11 19:20:23 +0900
category: CS
---
# 면접을 위한 CS 전공지식 노트  

CPU는 산술논리연산장치, 제어장치, 레지스터로 구성되어 있는 컴퓨터 장치를 말하며  
메모리에 올라와 있는 프로그램의 명령어들을 실행한다.  

*메모리와 CPU의 차이: 메모리(RAM)은 컴퓨터가 일시적으로 데이터와 프로그램을 저장하고 CPU가 액세스할 수 있도록 하는 
장소이며, CPU는 계산과 데이터 처리를 수행하는 중앙 처리장치이다. 

> 메모리 계층  

메모리 계층은 레지스터, 캐시, 메모리, 저장장치로 구성되어 있다.   
(상위일수록 속도빠름) (하위일수록 용량 늘어남)  
레지스터  
캐시(L1, L2 캐시)  
메모리(RAM)/주기억장치  
저장장치(HDD, SDD)/보조기억장치  
  
레지스터: CPU 안에 있는 작은 메모리로 휘발성 있고 속도 가장 빠르고 기억 용량이 가장 적다.   
캐시: L1, L2 캐시를 지칭한다. 휘발성이 있고 속도가 빠르고 기억용량이 적다. L3 캐시도 존재한다.  
주기억장치: RAM을 가리키며 휘발성이 있고, 보통의 속도를 가지며 기억용량이 보통이다.  
보조기억장치: HDD, SDD를 일컬으며 휘발성이 있고, 속도가 느리며 기억 용량이 많다.  
  
RAM은 하드디스크로부터 일정량의 데이터를 복사해 임시 저장하고 이를 피료할 때마다 CPU에 빠르게 전달한다.  
계층위로 갈 수록 비싸지는데 용량을 작아지고 속도는 빨라진다.  
로딩중은 하드디스크 또는 인터넷에서 데이터를 읽어 RAM으로 전송하는 과정이 아직 끝나지 않음을 의미한다.  

> 캐시    

캐시는 데이터를 미리 복사해 놓는 임시 저장소이자 빠른 장치와 느린 장치에서 속도 차이에 따른 병목 현상을 줄이기 위한 메모리이다.  
이를 통해 데이터를 접근하는 시간이 오래 걸리는 경우를 해결하고 무언가를 다시 계산하는 시간을 절약할 수 있다.  
하지만 캐시 메모리의 슬롯 수가 제한되어 있기 때문에 모든 주소를 캐시에 저장할 수 없다.  
  
실제 메모리와 CPU 사이의 속도 차이가 너무 크기 때문에 그 중간에 레지스터 계층을 둬 속도 차이를 해결한다.  
이렇게 속도 차이를 해결하기 위해 계층과 계층 사이에 있는 계층을 캐싱 계층이라 한다.  
ex) 캐시 메모리와 보조기억장치 사이에 있는 주기억장치를 보조기억장치의 캐싱 계층이라고 볼 수 있다.  
  
지역성의 원리  
캐시 계층을 두는 것 말고도 캐시를 직접 설정하려면 자주 사용하는 데이터를 기반으로 설정해야한다.  
자주 사용하는 데이터에 대한 근거는 지역성이 된다.(시간 지역성/ 공간 지역성)  
  
시간 지역성: 시간 지역성은 최근에 사용한 데이터에 다시 접근하려는 특성이다.  
ex)for문의 i +=연산    
  
공간 지역성: 최근 접근한 데이터를 이루고 있는 공간이나 그 가까운 공간에 접근하는 특성 
ex)배열에서 i번째 요소에 접근할 수 있는 것  
  
> 캐시히트와 캐시미스

캐시히트: 캐시에서 원하는 데이터를 찾은 경우이다.  
캐시미스: 캐시에서 찾는 데이터가 캐시에 없을 경우 메모리에 가서 데이터를 불러오는 것이다.  
제어장치를 거쳐 캐시데이터를 바로 이용할 수 있다면 캐시히트 아니고 메모리에서 캐시로 데이터를 불러와서 수행한다면 캐시미스이다.  
캐시히트는 위치도 가깝고 CPU 내부 버스를 기반으로 작동하기 때문에 빠르다.  
반면 캐시미스가 발생하면 메모리에서 시스템 버스를 기반으로 데이터를 가져오기 때문에 느리다.  
  
*시스템 버스: 컴퓨터 시스템 내에서 다양한 구성요소 간에 데이터와 신호를 전송하기 위한 통로이다.  
*CPU 내부 버스: 중앙 처리 장치(CPU) 내부에서 다양한 기능 블록 간에 데이터 및 제어 신호를 전달하는 버스이다.  
여기서 버스는 컴퓨터 아키텍처에서 데이터, 주소 및 제어 신호를 전송하는 통로를 의미한다.  
  
캐시매핑: 캐시가 히트되기 위해 매칭하는 방법을 의미한다. CPU의 레지스터와 주 메모리(RAM)간에 데이터를 주고받을 때  
레지스터는 주 메모리에 비하면 작고 주 메모리는 굉장히 크기 때문에 작은 레지스터가 캐시 계층으로써 역할을 잘 해주려면  
매핑이 중요해진다.  
  
직접매핑: 메모리가 1에서 100이 있을 때 캐시가 1에서 10이 있다면 1:1~10 2:11~20 이런식으로 매핑하는 것을 말한다.  
처리가 빠르지만 충돌 발생이 잦다.    
  
연관매핑: 순서를 일치시키지 않고 관련 있는 캐시와 메모리를 매핑한다.  
충돌이 적지만 모든 블록을 탐색해야 해서 속도가 느리다.  
  
집합 연관 매핑: 직접매핑과 연관매핑을 합쳐놓은 것으로 순서는 일치시키지만 집합을 둬 저장하며  
블록화되어 있기 떄문에 검색을 더 효율적이다.     
예를 들면 메모리가 1에서 100까지 있고 캐시가 1에서 10까지 있을 때 캐시 1에서 5에는 1에서 50까지의 데이터를  
무작위로 저장시키는 것이다.  
  
웹 브라우저의 캐시에는 쿠키, 로컬 스토리지, 세션 스토리지가 있는데  
이는 사용자의 커스텀 정보나 인증 모듈관련 사항들을 웹 브라우저에 저장해  
추후 서버에 요청할 때 자신을 나타내는 아이덴티티나 중복 요청 방지를 위해 쓰인다.  
    
쿠키: 만료기한이 있는 키-값 저장소이다.  
same site옵션을 strict로 설정하지 않을 경우 다른 도메인에서 요청했을 때 자동 전송되며,  
4KB까지 데이터를 저장할 수 있고 만료기한을 정할 수 있다.  
*도메인: 인터넷에서 웹사이트나 이메일 주소를 식별하기 위해 사용되는 문자열이다.  
ex) www.abc.com  
  
로컬 스토리지: 만료기한이 없는 키-값 저장소이다.  
10MB까지 저장할 수 있으며 웹 브라우저를 닫아도 유지되고 도메인 단위로 저장, 생성된다.  
HTML5를 지원하지 않는 웹 브라우저에서는 사용할 수 없고 클라이언트에서만 수정 가능하다.  
  
세션 스토리지: 만료기한이 없는 키-값 저장소이다.  
탭 단위로 세션 스토리지를 생성하며 탭을 닫을 때 해당 데이터가 삭제된다.  
5MB까지 저장이 가능하고 HTML5를 지원하지 않는 웹 브라우저는 사용할 수 없고 클라이언트에서만 수정 가능하다.  
  
데이터베이스의 캐싱 계층으로 메인 데이터베이스 위에 레디스 데이터베이스 계층을 캐싱계층으로 둬 성능을 향상시키기도 한다.  
앱이 레디스로부터 데이터를 읽어온다(캐시히트).  
앱이 레디스에 데이터를 쓴다.  
만약 레디스에 앱이 찾는 데이터가 없을 경우 메인 데이터베이스에서 가져온다(캐시미스).  

참고 출처:  
https://gguljaem.tistory.com/entry/%EC%BA%90%EC%8B%9C%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EB%A7%A4%ED%95%91%EA%B8%B0%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%A4%EB%AA%85  
