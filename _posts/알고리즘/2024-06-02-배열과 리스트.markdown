---
layout: post
title: 배열과 리스트
date: 2024-06-02 19:20:23 +0900
category: Algorithm
---
# 시간 복잡도 표기법 알아보기
> Do it! 알고리즘 코딩 테스트 

(파이썬 기준) 1초의 수행시간: 2000만번 ~ 1억번 연산횟수  
<br>  
빅 오메가:최선일 때 연산 횟수  
빅 세타:보통일 때 연산 횟수  
빅 오: 최악일 때 연산 횟수  
<br>  
코딩테스트에선 주로 빅 오 표기법을 따른다.  
<br>
```python
N= 10
cnt=1
<br>
for i in range(N):
   cnt+=1
```  
<br>  
```python
N= 10
cnt=1
<br>
for i in range(N):
   cnt+=1
<br>
for i in range(N):
   cnt+=1
```  
<br>  
두 예제 코드는 연산 횟수가 2개 차이날 것 같지만  
코딩테스트에서 일반적으로 상수를 무시한다.
따라서 두 코드 모두 시간 복잡도는 O(N)이 된다.  
<br>  
시간복잡도는 가장 많이 중첩된 반복문을 기준으로 도출한다.  
<br>
배열: 메모리의 연속공간에 값이 채워져 있는 형태의 자료구조  
배열의 값은 인덱스를 통해 참조할 수 있고 선언한 자료형의 값만 저장할 수 있다.  
<br>  
배열의 특징  
- 인덱스를 사용해 값에 접근할 수 있다.  
- 새로운 값을 삽입하거나 특정 인덱스에 있는 값을 삭제하기 어렵다. 값을 삽입하거나 삭제하려면 해당 인덱스 주변에 있는 값을 이동시키는 과정이 필요하다.  
- 배열의 크기는 선언할 때 지정할 수 있으며 한 번 선언하면 크기를 늘리거나 줄일 수 없다.  
- 구조가 간단하다.  
<br>  
리스트: 값과 포인터를 묶은 노드라는 것을 포인터로 연결한 자료구조이다.  
<br>
리스트의 특징  
- 인덱스가 없으므로 값에 접근하려면 헤드 포인터부터 순서대로 접근해야 한다. 따라서 값에 접근하는 속도가 느리다.  
- 포인터로 연결되어 있으므로 데이터를 삽입하거나 삭제하는 연산 속도가 빠르다.  
- 선언할 때 크기를 별도로 지정하지 않아도 된다. 리스트의 크기는 정해져 있지 않고, 크기가 변하기 쉬운 데이터를 다룰 때 적절하다.  
- 포인터를 저장할 공간이 필요하므로 배열 구조가 복잡하다.  
<br>  
파이썬에서는 배열과 리스트를 구분하지 않지만 알아두도록 하자.  
<br>   

> 백준 온라인 저지 11720[숫자의 합 구하기](https://www.acmicpc.net/problem/11720)  
제한시간 1초  
```python
import sys
n=sys.stdin.readline().strip()
answer = sum(map(int,list(sys.stdin.readline().strip())))
print(answer)
```  
<br>  

> 백준 온라인 저지 1546[평균](https://www.acmicpc.net/problem/11720)  
제한시간 2초  
![평균 구하기 예시]('./_posts/알고리즘/img/평균구하기.jpg')
```python
import sys 
input=sys.stdin.readline
M=int(input())
now_list=list(map(int, input().split()))

#최솟값이나 최댓값 min(), max()함수의 시간 복잡도는 O(n) #n은 리스트의 길이 
print((sum(now_list)/max(now_list))*(100/M))
```  

> 백준 온라인 저지 11659[구간 합 구하기 4](https://www.acmicpc.net/problem/11659)  
제한시간 0.5초
```python
#백준에서는 외부 라이브러리 사용불가 
#import numpy 사용불가해서 자동적으로 np.cumsum도 사용불가 
import sys
#sys.stdin.readline
n, q = map(int,input().split())
nl = list(map(int, input().split())) 
cumsum_nl = []

#이렇게 하면 계산하면서 수가 줄어들게 되므로 내가 의도한대로 계산이 안된다. 
#cumsum_nl = [cumsum_nl[ii-1]+cumsum_nl[ii] for ii in range(1,n)]

#가중합
for ii in range(n):
    if ii==0:
        cumsum_nl.append(0)
    cumsum_nl.append(cumsum_nl[ii]+nl[ii])
cumsum_nl.pop(0) #첫번째 요소 제거 

for nn in range(q):
    start, end = map(int, input().split())
    #누적합을 구한 리스트에서 n부터 m까지의 합을 구하는 법
    #ex) 2번째부터 5번째 합 
    #   5번째 누적합 - 1번째 누적합 
    #  [5,4,3,2,1]
    # -[5]
    # =  [4,3,2,1]의 합      
    #start값이 1일 때 -2를 하면 마지막 값을 가리키게 되므로 따로 처리해준다. 
    if start==1:
        print(cumsum_nl[end-1])
    else:
        print(cumsum_nl[end-1]-cumsum_nl[start-2])
#시간초과 
```  
<br>  
```python
import sys 

sys.stdin.readline
n, q = map(int,input().split())
nl = list(map(int, input().split())) 
cumsum_nl = []

for ii in range(n):
    if ii==0:
        cumsum_nl.append(0)
    cumsum_nl.append(cumsum_nl[ii]+nl[ii])    
    
#기존에 썼던 방식(시간초과) 
# for nn in range(q):
#     start, end = map(int, input().split())
#     if start==1:
#         print(cumsum_nl[end])
#     else:
#         print(cumsum_nl[end]-cumsum_nl[start-1])
    
#시간단축 포인트  
for i in range(q):
    start, end = map(int, input().split())
    print(cumsum_nl[end]-cumsum_nl[start-1])
#맞춤
```  
<br>  

#참고사항
**Big O(1)**, 즉 상수 시간 복잡도(constant time complexity)는 어떤 데이터의 크기와 관계없이 항상 일정한 시간이 걸리는 알고리즘을 나타낸다.  
이는 **한 번의 연산으로 결과를 도출**할 수 있다는 의미다.  
<br>  
반면에 **Big O(n)**, 즉 선형 시간 복잡도(linear time complexity)는 처리해야 할 **데이터의 개수(n)에 비례하여 연산 시간이 증가**하는 알고리즘을 말한다.  
예를 들어, 데이터가 10개일 때 10번의 연산을, 100개일 때는 100번의 연산을 수행한다고 보면 된다.  
배열을 순회하거나 리스트의 각 요소를 한번씩 확인하는 등의 작업이 Big O(n)에 해당한다.  

**즉 O(1)은 데이터 크기에 상관없이 연산 횟수가 변하지 않고, O(n)은 데이터의 크기가 커질수록 연산 횟수가 늘어나는 상황**을 나타낸다.  
[O(1)과 O(n)의 차이](https://www.inflearn.com/questions/1092681/o-1-%EA%B3%BC-o-n-%EC%9D%B4-%ED%97%B7%EA%B0%88%EB%A0%A4%EC%9A%94)  
<br>  
시간초과가 되었던 경우 누적합리스트를 생성할 때 리스트의 모든 요소를 한 번 순회해야 하므로 O(n)의 시간이 소요된다.  
여기서 q개의 쿼리에 대해 해당 작업을 반복해 O(q)의 시간이 소요된다.  
따라서 O(q) 시간이 소요된다.  
기존에 내가 쓴 코드는 if문을 거쳐서 수행하기 때문에 연산량이 더 늘어난다. 이 때문에 시간초과가 난 듯 하다.  

> 백준 온라인 저지 11660[구간 합 구하기 2](https://www.acmicpc.net/problem/11660)  
제한시간 0.1초
```python
import sys
n=sys.stdin.readline().strip()
answer = sum(map(int,list(sys.stdin.readline().strip())))
print(answer)
```
<br>
1 2 3  
2 3 4 라는 배열이 있을 때  
<br>  
1 3 6  
3 8 15여기서 8이 나오는데  
(1+2)+(1+2)+3-(중복된 1)=8이 된다.  
<br>  
15의 경우  
8+6+4-3(중복된 3)=15가 나오게 된다. 
<br>
**matrix[i][j]까지의 구간합= matrix[i][j-1]까지의 구간합+matrix[i-1][j]까지의 구간합+matrix[i][j]-matrix[i-1][j-1]까지의 구간합**  
                         = 현재 기준 왼쪽값 + 현재 기준 위쪽 값 + 현재 값 - 현재 기준 왼쪽 대각선에 있는 값  
<br>
<br>                           
그렇다면 (1,2)부터 (2,3)까지의 구간합은 어떻게 구할까?  
(2,3)까지의 구간합-(1,2)까지의 구간합으로 계산하기에는 기존에 (1,2)까지의 구간합에 (2,3)까지의 구간합에 해당하는 (1,1)부분이 존재한다. 
(8+6+4-3)-(1+2)=12  
(1+2+3+2+3+4)-(1+2)=12  
<br>  
(X1,Y1)에서 (X2,Y2)까지의 구간합 = (X1,Y1)수부터 (X2,Y2)수까지의 합  
                               **= m(atrix)[X2][y2]구간합-m[X1-1][y2]-m[X2][Y1-1]+m[X1-1][Y1-1]**  
                                 =(2,3)까지의 구간합-(0,3)구간합[행 구간합]-(2,1)구간합[열 구간합]+(0,2)구간합[중복값 구간합]  
                                 #x나 y에서 0이 나오면 이는 matrix를 벗어나는 값으로 간주하고 0으로 간주한다.  
                                 =15-0-3+0=12   
<br>
![구간합 구하기 매커니즘](https://github.com/shina1221/shina1221.github.io/blob/7f145a5d0660bb8c973c60e94f124b815fbc98d1/_posts/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/img/%EA%B5%AC%EA%B0%84%ED%95%A9%20%EA%B5%AC%ED%95%98%EA%B8%B0.jpg)
<br>

> 백준 온라인 저지 [11660번](https://www.acmicpc.net/problem/11660)   

```python
matrix = []
#input().strip().split() -> sys.stdin.readline().strip().split() 
#N,M = map(int,sys.stdin.readline().strip().split())
N,M = map(int,input().strip().split())

for i in range(N+1):
    if i==0:
        #matrix[i]=[0]*(N+1)로 추가하면 리스트는 배열이 아니다. 
        #인덱스가 없는 자료형이기 때문에 에러가 나므로 append해준다. 
        matrix.append([0]*(N+1))
    else:
        #map함수는 map 객체로 나오므로 list처리를 하거나 변수에 할당해줄 필요가 있다. 
        matrix.append(list(map(int, input().strip().split())))
        matrix[i].insert(0,0) #0번째 자리에 0을 추가한다.

#확인용        
weighted_sum_matrix= matrix.copy()
weighted_sum_matrix    

#위에서 본 매커니즘을 적용한다. 
#현재값+위쪽값+왼쪽값-왼쪽상단값
for wi in range(1,N+1):
    for wj in range(1,N+1):
        weighted_sum_matrix[wi][wj]=weighted_sum_matrix[wi][wj]+weighted_sum_matrix[wi-1][wj]+weighted_sum_matrix[wi][wj-1]-weighted_sum_matrix[wi-1][wj-1] 

weighted_sum_matrix= matrix.copy()
weighted_sum_matrix    

for j in range(M):
    x1, y1, x2, y2 = map(int, input().strip().split())
    answer = weighted_sum_matrix[x2][y2]-weighted_sum_matrix[x1-1][y2]-weighted_sum_matrix[x2][y1-1]+weighted_sum_matrix[x1-1][y1-1]
    print(answer)
```
시간제한이 1초이므로 2000만번 이하로 연산이 완료되어야 한다.  
<br>  
#input으로 받으면 연산량에 차이가 생긴다.  
#sys.stdin.readline()  
<br>  
```python
import sys
N,M = map(int,sys.stdin.readline().strip().split())
matrix = []

for i in range(N+1):
    if i==0:
        matrix.append([0]*(N+1))
    else:
        matrix.append(list(map(int, sys.stdin.readline().strip().split())))
        matrix[i].insert(0,0) 
            
for wi in range(1,N+1):
    for wj in range(1,N+1):
        matrix[wi][wj]=matrix[wi][wj]+matrix[wi-1][wj]+matrix[wi][wj-1]-matrix[wi-1][wj-1] 
        
for j in range(M):
    x1, y1, x2, y2 = map(int, sys.stdin.readline().strip().split())
    answer = matrix[x2][y2]-matrix[x1-1][y2]-matrix[x2][y1-1]+matrix[x1-1][y1-1]
    print(answer)
```

